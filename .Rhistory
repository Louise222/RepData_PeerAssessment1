runExample("02_text")
library(shiny)
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("07_widgets")
runExample("10_download")
runExample("11_timer")
runExample("09_upload")
runExample("07_widgets")
runExample("05_sliders")
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
library(shinyapps)
shinyapps::deployApp('Shiny/App1')
install.packages("manipulate")
library(manipulate)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
manipulate(
barplot(as.matrix(longley[,factor]),
beside = TRUE, main = factor),
factor = picker("GNP", "Unemployed", "Employed"))
manipulate(
boxplot(Freq ~ Class, data = Titanic, outline = outline),
outline = checkbox(FALSE, "Show outliers"))
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
shiny::runApp('Shiny/App2')
shiny::runApp('Shiny/App2')
shiny::runApp('Shiny/App3')
shiny::runApp('Shiny/App3')
shiny::runApp('Shiny/App3')
runApp("/Shiny/censusVis", display.mode = "showcase")
runApp("Shiny/censusVis", display.mode = "showcase")
runApp("Shiny/censusVis", display.mode = "showcase")
runApp("Shiny/censusVis", display.mode = "showcase")
install.packages("maps")
install.packages("mapproj")
counties <- readRDS("/Shiny/censusVis/data/counties.rds")
counties <- readRDS("Shiny/censusVis/data/counties.rds")
head(counties)
library(maps)
library(mapproj)
?world
source("Shiny/censusVis/helpers.R")
percent_map(counties$white, "darkgreen", "% white")
runApp("Shiny/censusVis", display.mode = "showcase")
shiny::runApp('Shiny/censusVis')
runApp("Shiny/censusVis", display.mode = "showcase")
install.packages("slidify")
install.packages("devtools")
library(devtools)
install_github("slidify","ramnathv")
install_github('slidifyLibraries','ramnathv')
ilibrary(slidify)
library(slidify)
install.packages("e1071")
library(e1071)
?svm
x <- array(data = c(0,0,1,1,0,1,0,1),dim=c(4,2))
y <- factor(c(1,-1,-1,1))
model <- svm(x,y,type="C-classification")
predict(model,x)
example("svm")
View(iris)
View(iris)
rnorm(5)
A=seq(0,2*pi,length.out=1000)
r=2
x1=r*cos(A)
y1=r*sin(A)
plot(x1,y1,asp=1)
plot(x1,y1)
theta=seq(0,2*pi,length.out=100)
x1=cos(theta)+rnorm(100)
y1=sin(theta)+2+rnorm(100)
plot(x1,y1,asp=1)
theta=seq(0,2*pi,length.out=100)
x1=cos(theta)+0.01*rnorm(100)
y1=sin(theta)+2+0.01*rnorm(100)
plot(x1,y1,asp=1)
theta=seq(0,2*pi,length.out=100)
x1=cos(theta)+0.1*rnorm(100)
y1=sin(theta)+2+0.1*rnorm(100)
plot(x1,y1,asp=1)
theta=seq(0,2*pi,length.out=500)
x1=cos(theta)+0.1*rnorm(500)
y1=sin(theta)+2+0.1*rnorm(500)
plot(x1,y1,asp=1)
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
plot(x1,y1,asp=1)
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
point(x2,y2,asp=1)
points(x2,y2,asp=1)
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
plot(x2,y2,asp=1,col='red')
points(x1,y1,asp=1)
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
plot(x2,y2,asp=1,col='red',xlab = 'X1',ylab = 'X2',
main = 'Two group of random number')
points(x1,y1,asp=1)
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
plot(x2,y2,asp=1,col='red',xlab = 'X1',ylab = 'X2',
main = 'Two groups of random data')
points(x1,y1,asp=1,col='blue')
x3=1.5*cos(theta)
y3=1.5*sin(theta)+2
points(x3,y3,asp=1)
?plot
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
Z1=x1^2; Z2=y1^2; Z3=y1
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
plot3D::points3D(Z1,Z2,Z3)
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
plot(x2,y2,asp=1,col='red',xlab = 'X1',ylab = 'X2',
main = 'Two groups of random data')
points(x1,y1,asp=1,col='blue')
theta=seq(0,2*pi,length.out=200)
x1=cos(theta)+0.1*rnorm(200)
y1=sin(theta)+2+0.1*rnorm(200)
x2=2*cos(theta)+0.1*rnorm(200)
y2=2*sin(theta)+2+0.1*rnorm(200)
plot(x2,y2,asp=1,col='red',xlab = 'X1',ylab = 'X2',
main = 'Two groups of random data')
points(x1,y1,asp=1,col='blue')
x3=1.5*cos(theta)
y3=1.5*sin(theta)+2
points(x3,y3,type='l',asp=1)
setwd("Desktop/RepData_PeerAssessment1")
activity<-read.csv("activity.csv",colClasses = c("integer", "Date", "factor"))
noNA <- na.omit(activity)
View(noNA)
View(noNA)
library(ggplot2)
?"ggplot"
process_activity <- na.omit(activity)
dim(process_activity)
rownames(process_activity) <- 1:nrow(process_activity)
head(process_activity)
library(ggplot2)
library(dplyr)
group_day <- group_by(process_activity,date)
total_step <- summarize_each(group_day,funs(sum))
total_step <- summarize(group_day,funs(sum))
total_step <- summarise(group_day,funs(sum))
?summarize_each
total_step <- summarise(group_day,totalstep=sum(step))
total_step <- summarise(group_day,totalstep=sum(steps))
View(total_step)
?"ggplot"
g <- ggplot(total_step, aes(date, totalstep))
g + geom_bar()
g + geom_bar(stat="bin")
g + geom_bar(stat="identity")
?mean
mean(total_step$totalstep)
median(total_step$totalstep)
View(process_activity)
